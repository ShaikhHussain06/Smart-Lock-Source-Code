#include <SPI.h>
#include <MFRC522.h>
#include <Servo.h>

// Pins
#define SS_PIN 10
#define RST_PIN 9
#define SERVO_PIN 3

MFRC522 mfrc522(SS_PIN, RST_PIN);
Servo myServo;

// List of allowed UIDs
byte allowedUIDs[][4] = {
  {0xF3, 0x44, 0x88, 0x34},
  {0x07, 0x86, 0xAE, 0x02}
};

const int allowedCount = sizeof(allowedUIDs) / sizeof(allowedUIDs[0]);

void setup() {
  Serial.begin(9600);
  SPI.begin();
  mfrc522.PCD_Init();
  myServo.attach(SERVO_PIN);
  myServo.write(0); // Start at 0°
  Serial.println("Scan your RFID tag...");
}

void loop() {
  if (!mfrc522.PICC_IsNewCardPresent()) return;
  if (!mfrc522.PICC_ReadCardSerial()) return;

  Serial.print("Scanned UID: ");
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    Serial.print(mfrc522.uid.uidByte[i], HEX);
    Serial.print(" ");
  }
  Serial.println();

  if (isAllowed(mfrc522.uid.uidByte, mfrc522.uid.size)) {
    Serial.println("✅ Access Granted!! DOOR UNLOCKED");
    myServo.write(90);
    delay(3000);
    myServo.write(0);
    delay(500);
  } else {
    Serial.println("⛔ Access Denied!! TRY AGAIN");
  }

  mfrc522.PICC_HaltA();
  mfrc522.PCD_StopCrypto1();
}

// Function to check if UID is allowed
bool isAllowed(byte *uid, byte length) {
  for (int i = 0; i < allowedCount; i++) {
    bool match = true;
    for (int j = 0; j < length; j++) {
      if (uid[j] != allowedUIDs[i][j]) {
        match = false;
        break;
      }
    }
    if (match) return true;
  }
  return false;
}
